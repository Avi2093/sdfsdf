   // Call the TriggerEmail function to check if email should be triggered
var emailResponse = TriggerEmail(response, jsonString, requestTaskDetails.employeeEmail);
return Json(emailResponse);


 public string TriggerEmail(IRestResponse response, string details, string employeeEmail)
        {
            // Check if the response contains an ID, key, and self
            JObject json = JObject.Parse(response.Content);
            var responseString = JsonConvert.SerializeObject(response.Content);

            //Assinge firstName and lastName 
            List<xref_productdevelopment_team> assigneeDetails = new List<xref_productdevelopment_team>();
            if (!string.IsNullOrEmpty(employeeEmail))
            {
                assigneeDetails = GetAssigneeDetails(employeeEmail);
            }


            //HTML body generation
            string htmlString = htmlBody();
            var resultHtml = htmlString.Replace("#firstName", assigneeDetails[0].firstName).Replace("#LastName", assigneeDetails[0].lastName);

            SendEmail(resultHtml, assigneeDetails[0].employeeEmail);
            
            
            public void SendEmail(string htmlBody, string ToAddress)
        {

            MailClient client = new MailClient(EndpointConfiguration.NetTcpBinding_IMail);
            MailData mailData = new MailData();

            //string ToAddress = "";
            string CCAddress = "";
            string BCCAddress = "";

            mailData.FromAddress = Convert.ToString(_configuration["EmailConfiguration:emailFrom"]);
            //ToAddress = Convert.ToString(ToAddress);

            mailData.ToAddress = Convert.ToString(ToAddress);
            // mailData.CCAddress = Convert.ToString(CCAddress);
            //mailData.BCCAddress = Convert.ToString(BCCAddress);             
            mailData.IsHTMLBody = true;
            mailData.MailSubject = Convert.ToString(_configuration["EmailConfiguration:emailsubject"]);
            mailData.MailBody = htmlBody;
            client.SendMailAsync(mailData);
        }

        public string htmlBody()
        {
            return @"<html lang=""en"">
<head>
    <meta charset=""UTF-8"" />
    <title>Jira Task Update</title>
</head>
<body style=""font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5; color: #333;"">
    <div style=""background-color: #fff; border: 1px solid #ccc; border-radius: 5px; padding: 20px;"">

        <h2 style=""font-size: 24px; margin-bottom: 0;"">Jira Task Update</h2>
        <hr style=""border: none; border-top: 1px solid #ccc; margin: 10px 0;"" />

        <p>Dear #firstName #LastName</p>

        <p>We are writing to inform you that a task has been assigned to you. Please log in to your Jira account to view the details.</p>

        <div style=""text-align: center;"">
            <img src=""../Mailerdata/img.png"" alt=""Image"" style=""max-width: 100%; height: auto;"" />
        </div>

        <hr style=""border: none; border-top: 1px solid #ccc; margin: 10px 0;"" />

        <p style=""font-size: 12px;"">This is an automated email, please do not reply.</p>

    </div>
    <div style=""text-align: center; margin-top: 20px; font-size: 12px; color: #999;"">
        <p>From XYZ Team</p>
    </div>
</body>
</html>

                     ";
        }
 public List<xref_productdevelopment_team> GetAssigneeDetails(string emailAddress)
        {
            List<xref_productdevelopment_team> assigneeDetails = new List<xref_productdevelopment_team>();
            assigneeDetails = _context.xref_productdevelopment_team
                .Where(e => e.active == 1 && e.employeeEmail == emailAddress)
                .Select(e => new xref_productdevelopment_team { firstName = e.firstName, lastName = e.lastName, employeeEmail = e.employeeEmail })
                .ToList();

            return assigneeDetails;
        }
