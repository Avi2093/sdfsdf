@model JiraTicketingToolViewModel
<style>
    .form-heading {
        background-color: #f2f2f2;
        padding: 10px;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    form {
        background-color: #fff;
        padding: 20px;
        border: 1px solid #ccc;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    select {
        width: 100%;
        height: 40px;
        padding: 5px;
        font-size: 16px;
        margin-bottom: 10px;
        box-sizing: border-box;
    }

    .required:after {
        content: "*";
        color: red;
        margin-left: 5px;
    }

    select#SelectedTask, select#SelectedStory {
        width: 100%;
    }

    #reset-btn {
        float: right;
        margin-bottom: 10px;
    }

    .StoryOptions div {
        display: inline-block;
        width: 100%;
        margin-top: 10px;
    }

        .StoryOptions div select {
            width: 100%;
        }

    .js-select2, .select2-container {
        width: 100% !important;
    }


    /* Adjust radio button width */
    input[type="radio"] {
        width: 1.2em;
        height: 1.2em;
        vertical-align: middle;
    }

    .scrollable {
        height: 200px; /* set the height of the scrollable area */
        overflow: auto; /* enable scrolling */
    }

    .form-group {
        margin-bottom: 1rem;
    }

</style>


<div class="form-heading">Form  <a href="@Url.Action("SignOut", "JiraTicketingTool")" class="float-end btn btn-danger">logout</a></div>
<div style="overflow-x: auto;">
    <form onsubmit="return submitDetails()">
        <div>
            <label for="Initiative-dropdown">Initiatives<span class="required"></span></label>
            @Html.DropDownListFor(m => m.SelectedInitiative, Model.InitiativeSelectList, "Select an Initiative", new { @class = "js-select2" })
        </div>
        <div>
            <label for="project-dropdown">Project List<span class="required"></span></label>
            @Html.DropDownListFor(m => m.SelectedProject, Model.ProjectSelectList, "Select a project", new { @class = "js-select2" })

        </div>
        <div>
            <label for="epic-dropdown">Epic List<span class="required"></span></label>
            @Html.DropDownListFor(m => m.SelectedEpic, Model.EpicSelectList, "Select an epic", new { @class = "js-select2" })

        </div>
        <br />
        <div id="divOptions" style="display:none">

            <label>Select Below Option to Create</label>
            <input type="radio" name="taskStoryOpt" value="Task" /> Task
            <input type="radio" name="taskStoryOpt" value="Story" /> Story
            <input type="radio" name="taskStoryOpt" value="Sub-Task" /> Sub Task
            <input type="radio" name="taskStoryOpt" value="Bug" /> Bug
        </div>

        <div class="StoryOptions" id="IdSubTaskOption" style="display:none">
            <div class="form-group ">
                <div class="col-md-12">
                    <pre style="margin: 0 !important;">Please select the Task in which you want create the Sub task!! </pre>
                    <label for="Task-dropdown">Task List<span class="required"></span></label>
                        @Html.DropDownListFor(m => m.SelectedTask, Model.TaskSelectList, "Select a Task", new { @class = "js-select2" })

                </div>
            </div>
        </div>

        <div class="StoryOptions" id="IdBugStoryOption" style="display:none">
            <div class="form-group ">
                <div>
                    <p style="margin: 0 !important;">Please select the story in which you want create the bug!! </p>
                    <label for="Story-dropdown">Story List<span class="required"></span></label>
                    @Html.DropDownListFor(m => m.SelectedStory, Model.StorySelectList, "Select a Story", new { @class = "js-select2" })
                </div>
            </div>
        </div>

        <div id="divYesShowStory" style="display:none">
            <select id="selIssueType class=" form-control"">
                <option>Select Issue Type</option>
                <option value="Task">Task</option>
                <option value="Story">Story</option>
            </select>
        </div>

        <div class="modal" tabindex="-1" role="dialog" id="IdiSTaskOrStoryDiv" aria-labelledby="modalTask" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Story or Task </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal();">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="iSTaskOrStoryDiv">
                            <div class="form-group">
                                <label for="Task-dropdown">Do you want to create a Task/Story<span class="required"></span></label>
                                <label>
                                    <input type="radio" name="taskStory" value="Yes" />
                                    @* @Html.RadioButtonFor(Model=>Model.iSTaskOrStory ,true)*@ Yes
                                </label>
                                <label>
                                    @*@Html.RadioButtonFor(Model=>Model.iSTaskOrStory ,false)*@
                                    <input type="radio" name="taskStory" value="No" />
                                    No
                                </label>
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        @*  <button type="button" class="btn btn-primary" >Save</button>*@
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModal();">Close</button>
                    </div>
                </div>

            </div>




        </div>
        <div class="row">
            <div class="col-6">
                <label for="Assignee">Assignee:</label>
                <select id="Assignee" class="form-control">
                    <option value="">--Select Assignee--</option>
                </select>
            </div>

        </div>


        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label for="summary">Summary:</label>
                    <textarea id="summary" name="summary" rows="3" cols="50" class="form-control"></textarea>
                </div>

            </div>
            <div class="col-6">
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" name="description" rows="6" cols="50" class="form-control"></textarea>
                </div>
            </div>

        </div>


        @*For Actual start Date and End Date*@
        <div class="form-group row">

            <div class="col-3">
                <label for="actualStartDate">Actual start date:</label>
                <input type="date" id="actualStartDate" name="actualStartDate" class=" form-control">
            </div>
            <div class="col-3">
                <label for="actualEndDate">Actual end date:</label>
                <input type="date" id="actualEndDate" name="actualEndDate" class="form-control">
            </div>
            <div class="col-3">
                <label for="prodReleaseDate">Production Release Date:</label>
                <input type="datetime-local" id="prodReleaseDate" name="prodReleaseDate" class="form-control">
            </div>
            <div class="col-3">
                <label for="dueDate">Due Date:</label>
                <input type="datetime-local" id="dueDate" name="dueDate" class="form-control">
            </div>

       <br />
            <div class="col-4">
                <label for="isBacklog">Is Backlog:</label>
                <select id="isBacklog" name="isBacklog" class="form-control">
                    <option value="">--Select--</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
            </div>


            <div class="col-4">
                <label for="ragStatus">RAG Status:</label>
                <select id="ragStatus" name="ragStatus" class="form-control">
                    <option value="" selected>-- Select RAG Status --</option>
                    <option value="Red">Red</option>
                    <option value="Amber">Amber</option>
                    <option value="Green">Green</option>
                </select>
            </div>

            <div class="col-4">
                <label for="billingEffort">Billing Effort:</label>
                <select id="billingEffort" name="billingEffort" class="form-control">
                    <option value="">--Select--</option>
                    <option value="Billable">Billable</option>
                    <option value="Non Billable">Non Billable</option>
                </select>
            </div>

            <div class="col-8">
                <label for="requesterDetails">Requester Details:</label>
                <input type="text" id="requesterDetails" name="requesterDetails" style="width: 100%" class="form-control">

            </div>
            <div class="col-4">
                <label for="sdTicketNo">SD Ticket No:</label>
                <input type="text" id="sdTicketNo" name="sdTicketNo" style="width: 100%" class="form-control">
            </div>
        </div>


        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label for="Status">Status</label>
                    @Html.DropDownListFor(m => m.SelectedStatus, Model.StatusSelectList, "Select Status",new { @class = "js-select2 form-control" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    <label for="Substatus">Substatus</label>
                    @Html.DropDownListFor(m => m.SelectedSubStatus, Model.SubStatusSelectList, "Select SubStatus",new { @class = "js-select2 form-control" })
                </div>
            </div>
        </div>


        <div class="row justify-content-end">
            <div class="col-auto">
                <input type="submit" class="btn btn-primary" value="Submit" />
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-primary" onclick="resetPage()">Reset</button>
            </div>

        </div>
    </form>
</div>

@section scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />


    <script>
        function closeModal() {
            $('#IdiSTaskOrStoryDiv').modal('hide');
        }
        function resetPage() {
            location.reload(true);
        }
        $(function () {
            // Initialize Select2 dropdowns
            $('.js-select2').select2();

            // Handle reset button click
            // Handle reset button click
            $('#reset-btn').on('click', function () {
                $('.js-select2').val(null).trigger('change');

            });
            $(document).ready(function () {
                var storyDiv = $('.StoryOptions');
                $('.iSTaskOrStoryDiv input[type="radio"]').change(function () {
                    if ($(this).val() == "Yes") {
                        $("#divYesShowStory").css({ "display": "block" });
                        $("#IdNoStoryOption").css({ "display": "none" });
                    } else {
                        $("#IdNoStoryOption").css({ "display": "block" });
                        $("#divYesShowStory").css({ "display": "none" });
                    }
                    console.log($(this).val())
                });

                //Assignee details
                GetAssigneeDetails();


            });

            // Handle description dropdown change event
            $('#SelectedInitiative').on('change', function () {
                var description = $(this).val();
                if (description) {
                    $.ajax({
                        url: '@Url.Action("GetProjects", "JiraTicketingTool")',
                        data: { description: description },
                        type: 'GET',
                        dataType: 'json',
                        success: function (data) {
                            var projectDropdown = $('#SelectedProject');
                            projectDropdown.empty();
                            projectDropdown.append($('<option>').attr('value', ''));
                            $.each(data, function (index, item) {
                                projectDropdown.append($('<option jiraKey="' + item.jiraProjectKey + '">').text(item.jiraProjectName).attr('value', item.jiraProjectName));

                            });
                            //projectDropdown.trigger('change');
                        }
                    });
                }
                else {
                    var projectDropdown = $('#SelectedProject');
                    projectDropdown.empty();
                    projectDropdown.append($('<option>').attr('value', ''));
                    projectDropdown.trigger('change');
                }
            });

            $('#SelectedProject').on('change', function () {
                var InitiativeName = $('#SelectedInitiative').val();
                var ProjectName = $(this).val();


                if (InitiativeName != "" && ProjectName != "") {
                    $.ajax({
                        url: '@Url.Action("GetEpics", "JiraTicketingTool")',
                        data: { description: InitiativeName, project: ProjectName },
                        type: 'GET',
                        dataType: 'json',
                        success: function (data) {
                            var epicDropdown = $('#SelectedEpic');
                            epicDropdown.empty();
                            epicDropdown.append($('<option>').attr('value', ''));
                            $.each(data, function (index, item) {
                                epicDropdown.append($('<option issueKey="' + item.issueKey + '">').text(item.epicName).attr('value', item.epicName));
                            });
                            // epicDropdown.trigger('change');
                        }
                    });
                }
                else {
                    var epicDropdown = $('#SelectedEpic');
                    epicDropdown.empty();
                    epicDropdown.append($('<option>').attr('value', ''));
                    epicDropdown.trigger('change');
                }
            });

            $('#SelectedEpic').on('change', function () {
                var EpicName = $(this).val();
                var ProjectName = $('#SelectedProject').val();
                // alert('fi');
                //$('#IdiSTaskOrStoryDiv').modal('show');
                $("#divOptions").css({ "display": "block" });

                if (ProjectName != "" && EpicName != "") {
                    $.ajax({
                        url: '@Url.Action("GetTasks", "JiraTicketingTool")',
                        data: { description: EpicName, project: ProjectName },
                        type: 'GET',
                        dataType: 'json',
                        success: function (data) {
                            var TaskDropdown = $('#SelectedTask');
                            TaskDropdown.empty();
                            TaskDropdown.append($('<option>').attr('value', 'select'));
                            $.each(data, function (index, item) {
                                TaskDropdown.append($('<option issueKey="' + item.issueKey + '">').text(item.taskName).attr('value', item.taskName));
                            });
                            // TaskDropdown.trigger('change');
                            $('#SelectedStory').removeAttr("disabled", 'disabled');
                        }
                    });
                }
                else {
                    var TaskDropdown = $('#SelectedTask');
                    TaskDropdown.empty();
                    TaskDropdown.append($('<option>').attr('value', ''));
                    TaskDropdown.trigger('change');
                }
            });

            //$("#SelectedTask").on('change', function () {
            //    if ($(this).val() == "select") {
            //        $('#SelectedStory').removeAttr("disabled", 'disabled');
            //    } else {
            //        $('#SelectedStory').attr("disabled", 'disabled');
            //    }
            //});

            $('#SelectedEpic').on('change', function () {
                var EpicName = $(this).val();
                var ProjectName = $('#SelectedProject').val();
                if (ProjectName != "" && EpicName != "") {
                    $.ajax({
                        url: '@Url.Action("GetStory", "JiraTicketingTool")',
                        data: { description: EpicName, project: ProjectName },
                        type: 'GET',
                        dataType: 'json',
                        success: function (data) {
                            var TaskDropdown = $('#SelectedStory');
                            TaskDropdown.empty();
                            TaskDropdown.append($('<option>').attr('value', ''));
                            $.each(data, function (index, item) {
                                TaskDropdown.append($('<option issueKey="' + item.issueKey + '">').text(item.storyDesc).attr('value', item.storyDesc));
                            });
                            //  TaskDropdown.trigger('change');
                            $('#SelectedStory').removeAttr("disabled", 'disabled');

                        }
                    });
                }
                else {
                    var TaskDropdown = $('#SelectedStory');
                    TaskDropdown.empty();
                    TaskDropdown.append($('<option>').attr('value', ''));
                    TaskDropdown.trigger('change');
                }
            });

            $('input[type=radio][name=taskStoryOpt]').change(function () {
                if (this.value == 'Sub-Task') {
                    $("#IdSubTaskOption").css({ "display": "block" });
                    $("#IdBugStoryOption").css({ "display": "none" });
                }
                else if (this.value == 'Bug') {
                    $("#IdBugStoryOption").css({ "display": "block" });
                    $("#IdSubTaskOption").css({ "display": "none" });
                } else {
                    $("#IdSubTaskOption").css({ "display": "none" });
                    $("#IdBugStoryOption").css({ "display": "none" });
                }
            });

            //For Status/SubStatus Dropdown
            $('#SelectedStatus').on('change', function () {
                // Get the dropdown elements
                var statusDropdown = $('#SelectedStatus');
                var substatusDropdown = $('#SelectedSubStatus');

                // Initialize the substatus dropdown with an empty list
                substatusDropdown.empty();
                substatusDropdown.append($('<option/>').val('').text('Select SubStatus'));

                // On change of the status dropdown, populate the substatus dropdown with values that match the selected status
                // statusDropdown.change(function () {
                var selectedStatus = $(this).val();
                substatusDropdown.empty();
                substatusDropdown.append($('<option/>').val('').text('Select SubStatus'));
                $.ajax({
                    type: "GET",
                    url: "/JiraTicketingTool/GetSubStatus",
                    data: { status: selectedStatus },
                    success: function (data) {
                        $.each(data, function (i, substatus) {
                            substatusDropdown.append($('<option/>').val(substatus.text).text(substatus.text));
                        });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        alert('Error occurred while loading substatus dropdown.');
                    }
                });
                // });
            });

        });


        function GetAssigneeDetails() {
            $.ajax({
                url: "/JiraTicketingTool/GetAssignee",
                type: "GET",
                dataType: "json",
                success: function (data) {
                    var options = "";
                    for (var i = 0; i < data.length; i++) {
                        options += "<option value='" + data[i].employeeEmail + "'>" + data[i].firstName + " " + data[i].lastName + "</option>";
                    }
                    $("#Assignee").append(options);
                    // Initialize Select2 plugin
                    $('#Assignee').select2();
                }
            });
        }


        function submitDetails() {
            console.log('1');
            // $("#SubmitButton").on("click", submitDetails);
            var initiatives = $("#SelectedInitiative").find('option:selected').val();
            var projectName = $("#SelectedProject").find('option:selected');
            var projectJiraKey = projectName.attr('jiraKey');
            projectName = projectName.val();
            var epicName = $("#SelectedEpic").find('option:selected');
            var epicIssueKey = epicName.attr('issueKey');
            var formData = new FormData();

            var taskelement = $("#SelectedTask").find('option:selected');
            var taskOrStoryIssueKey = taskelement.attr('issueKey');
            // var storyIssueKey="";
            if (taskelement.val() == 'select') {
                var storylement = $("#SelectedStory").find('option:selected');
                taskOrStoryIssueKey = storylement.attr('issueKey');
            }
            //var issueType = "";
            //if (document.querySelector('input[name="taskStory"]:checked').value == 'Yes') {
            //    issueType = $("#selIssueType").find('option:selected').val();
            //}
            //else {
            //    taskOrStoryIssueKey = taskOrStoryIssueKey;
            //}


            //Option task, story, subtask, bug
            var taskType = document.querySelector('input[name="taskStoryOpt"]:checked').value;
            var summary = $('#summary').val();
            var description = $('#description').val();

            // Get the selected FullName and employeeEmail
            var assigneeEmail = $("#Assignee").find('option:selected').val();



            console.log(initiatives, projectName, projectJiraKey, epicIssueKey, taskOrStoryIssueKey);
            formData.append('projectJiraKey', projectJiraKey);
            if (taskType == "Task" || taskType == "Story") {
                formData.append('issueKey', null);
                formData.append('epicIssueKey', epicIssueKey);
            } else {
                formData.append('epicIssueKey', null);
                formData.append('issueKey', taskOrStoryIssueKey);
            }
            formData.append('taskType', taskType);

            formData.append('summary', summary);
            formData.append('description', description);
            formData.append('employeeEmail', assigneeEmail);


            //  New code to send a post request with Basic Authentication
            $.ajax({
                url: '@Url.Action("CreateJiraTicket", "JiraTicketingTool")',
                // data: { projectJiraKey: projectJiraKey, epicIssueKey: epicIssueKey, taskType: taskType, issueKey: taskOrStoryIssueKey },
                //data: JSON.stringify({ requestTaskDetails: requestData }),
                type: 'POST',
                processData: false,
                contentType: false,
                //async: true,
                cache: false,
                data: formData,
                success: function (data) {
                    alert(data);
                }
            });
            return false;
        }


    </script>
    }

