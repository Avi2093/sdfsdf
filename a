USE [EmployeePortal]
GO
/****** Object:  StoredProcedure [dbo].[sel_alltools_test]    Script Date: 24-07-2023 16:29:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[sel_alltools_test]
    @id INT = NULL,
    @name VARCHAR(255) = NULL,
    @url VARCHAR(255) = NULL, 
   
    @duplicateName BIT =null OUTPUT,
    @duplicateURL BIT =null OUTPUT 
AS
BEGIN
   
    SET @duplicateName = 0
    SET @duplicateURL = 0

  

    IF EXISTS(SELECT 1 FROM ep_alltools WHERE name = @name)
        SET @duplicateName = 1

    IF EXISTS(SELECT 1 FROM ep_alltools WHERE url = @url)
        SET @duplicateURL = 1

    IF @id IS NOT NULL
    BEGIN
        SELECT id, name, url, active, toolorder, createdBy
        FROM ep_alltools
        WHERE active = 1 AND id = @id;
    END
    ELSE IF @name IS NOT NULL AND @url IS NOT NULL
    BEGIN
        SELECT id, name, url, active, toolorder, createdBy
        FROM ep_alltools
        WHERE active = 1 AND (name = @name AND url = @url);
    END
    ELSE
    BEGIN
        SELECT id, name, url, active, toolorder, createdBy
        FROM ep_alltools
        WHERE active = 1
        ORDER BY CASE WHEN toolorder IS NULL THEN 1 ELSE 0 END, toolorder, id;
    END

    -- Return the values using SELECT statements
    SELECT 
           @duplicateName as DuplicateName ,
           @duplicateURL as DuplicateURL;
END










public async Task<ResponseModel> UpdateTool(AllTools.UpdateToolRequest tool)
        {
            ResponseModel response;

            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@id", null);
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@duplicateName", dbType: DbType.Boolean, direction: ParameterDirection.Output);
                parameters.Add("@duplicateURL", dbType: DbType.Boolean, direction: ParameterDirection.Output);


                await _dbConnection.ExecuteAsync("sel_alltools_test", parameters, commandType: CommandType.StoredProcedure);
                var duplicateName = parameters.Get<bool>("@duplicateName");
                var duplicateUrl = parameters.Get<bool>("@duplicateURL");


                if (duplicateName && duplicateUrl)
                {
                    response = ApiResponse.CreateErrorResponse("Tool Name and Url should be different in order to update");
                    response.HttpStatusCode = Convert.ToInt32(HttpStatusCode.Conflict);
                }
                else if (duplicateName)
                {
                    response = ApiResponse.CreateErrorResponse("Tool Name should be different in order to update");
                    response.HttpStatusCode = Convert.ToInt32(HttpStatusCode.Conflict);
                }
                else if (duplicateUrl)
                {
                    response = ApiResponse.CreateErrorResponse("Tool Url should be different in order to update");
                    response.HttpStatusCode = Convert.ToInt32(HttpStatusCode.Conflict);
                }
