using EmployeePortal.API.Models;
using Newtonsoft.Json;

namespace EmployeePortal.API.common
{
    public static class ApiResponse
    {
        public static ResponseModel CreateSuccessResponse(object?[] responseArray = null, string message = "")
        {
            var responseData = responseArray != null ? JsonConvert.SerializeObject(responseArray) : "[]";
            return new ResponseModel(responseData, message, true);
        }

        public static ResponseModel CreateErrorResponse(string errorMessage) => new(null, errorMessage, false);
    }
}


















   public async Task<ResponseModel> GetAllTools()
        {
            try
            {
                var result = await _dbConnection.QueryAsync<object>("sel_getalltools", commandType: CommandType.StoredProcedure);
                var response = ApiResponse.CreateSuccessResponse(responseArray: result.ToArray(), message: "Retrieved Successfully!");
                return response;
            }

            catch (Exception ex)
            {
                var errorResponse = ApiResponse.CreateErrorResponse(errorMessage: ex.Message);
                return errorResponse;
            }
        }
        
        
        
        
        
        
          public async Task<ResponseModel> InsertTool(AllTools.InsertToolRequest tool)
        {
            ResponseModel? response = null;
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@action", "INSERT");
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@active", tool.Active);
                await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);
                response = ApiResponse.CreateSuccessResponse(responseArray: new[] { tool }, message: "Inserted Successfully!");


            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                response ??= ApiResponse.CreateErrorResponse("something went wrong!");
            }
            return response;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public async Task<ResponseModel> UpdateTool(int id, AllTools.UpdateToolRequest tool)
        {
            ResponseModel response;
            try
            {
                tool.Id = id;

                var parameters = new DynamicParameters();
                parameters.Add("@action", "UPDATE");
                parameters.Add("@id", tool.Id);
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@active", tool.Active);

                int rowsAffected = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);

                if (rowsAffected > 0)
                {
                    response = ApiResponse.CreateSuccessResponse(responseArray: new[] { tool }, message: "Record updated successfully!");
                }
                else
                {
                    response = ApiResponse.CreateErrorResponse("Record not found or failed to update!");
                }
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }

            return response;
        }














 public async Task<ResponseModel> DeleteTool(AllTools.DeleteToolRequest tool)
        {
            try
            {
                // Check if the record exists and has active = 1
                var existingRecord = await _dbConnection.QuerySingleOrDefaultAsync<int>(
                    "SELECT COUNT(*) FROM dbo.ep_alltools WHERE Id = @id AND active = 1",
                    new { id = tool.Id });

                if (existingRecord == 0)
                {
                    return ApiResponse.CreateErrorResponse("Record not found");
                }

                var parameters = new DynamicParameters();
                parameters.Add("@action", "DELETE");
                parameters.Add("@id", tool.Id);
                parameters.Add("@name", "");
                parameters.Add("@url", "");
                parameters.Add("@active", 0); // Set the active column to 0

                await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);

                return ApiResponse.CreateSuccessResponse(responseArray: new[] { tool }, message: "Record deleted successfully!");
            }
            catch (Exception ex)
            {
                return ApiResponse.CreateErrorResponse(ex.Message);
            }
        }
