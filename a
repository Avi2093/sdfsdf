 public async Task<object> UpdateTool(int id, AllTools.UpdateToolRequest tool)
        {
            try
            {
                tool.Id = id;

                var parameters = new DynamicParameters();
                parameters.Add("@action", "UPDATE");
                parameters.Add("@id", tool.Id);
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);
                parameters.Add("@active", tool.Active);

                var result = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);

                if (result > 0)
                {
                    return "Record updated successfully!";
                }
                else if (result == 0)
                {
                    var notFoundException = new NotFoundApiException("No rows were affected. The record may not exist.");
                    notFoundException.HttpStatusCode = HttpStatusCode.InternalServerError; // Set the desired HTTP status code
                    throw notFoundException;
                }
                else
                {
                    var notFoundException = new NotFoundApiException("Failed to update record!");
                    notFoundException.HttpStatusCode = HttpStatusCode.InternalServerError; // Set the desired HTTP status code
                    throw notFoundException;
                }
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }







        public async Task<object> DeleteTool(AllTools.DeleteToolRequest tool)
        {
            try
            {
                // Implement your logic to delete a tool using the "commit_alltools" stored procedure
                var parameters = new DynamicParameters();
                parameters.Add("@action", "DELETE");
                parameters.Add("@id", tool.Id);
                parameters.Add("@name", "");
                parameters.Add("@url", "");
                parameters.Add("@active", "");

                var rowsAffected = await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);

                if (rowsAffected > 0)
                {
                    return "Record deleted successfully!";
                }
                else
                {
                   
                    var notFoundException = new NotFoundApiException("Record not found");
                    notFoundException.HttpStatusCode = HttpStatusCode.InternalServerError; // Set the desired HTTP status code
                    throw notFoundException;

                }
            }
            catch (Exception ex)
            {
                throw new ApiException(ex.Message);
            }
        }
