 public async Task<ResponseModel> InsertTool(AllTools.InsertToolRequest tool)
        {
            ResponseModel? response = null;
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@id", null); // Change action to perform a duplicate check
                parameters.Add("@name", tool.Name);
                parameters.Add("@url", tool.Url);

                // Execute the duplicate check stored procedure
                var duplicateCheckResult = await _dbConnection.QueryFirstOrDefaultAsync<int>("sel_alltools", parameters, commandType: CommandType.StoredProcedure);

                if (duplicateCheckResult > 0)
                {
                    response = ApiResponse.CreateErrorResponse("Duplicate Data.");
                    response.HttpStatusCode = Convert.ToInt32(HttpStatusCode.Conflict);

                }
                else
                {
                    // No duplicate found, proceed with the insertion
                     parameters = new DynamicParameters(); 
                    parameters.Add("@action", "INSERT");
                    parameters.Add("@name", tool.Name);
                    parameters.Add("@url", tool.Url);
                    parameters.Add("@active", tool.Active);
                    parameters.Add("@createdBy", tool.createdBy);

                    await _dbConnection.ExecuteAsync("commit_alltools", parameters, commandType: CommandType.StoredProcedure);

                    response = ApiResponse.CreateSuccessResponse(message: "Inserted Successfully!");
                }
            }
            catch (Exception ex)
            {
                var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, ex.Message + " RequestBody: " + JsonConvert.SerializeObject(tool));
                logEvent.Properties["Source"] = "EmployeePortalAPI-AlltoolsController/InsertTool";
                var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                logger.Log(logEvent);
                throw;
            }
            finally
            {
                response ??= ApiResponse.CreateErrorResponse("Something went wrong!");
            }
            return response;
        }
