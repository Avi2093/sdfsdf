   Task<ResponseModel> CommitErrorLog(ErrorLogRequest errorLog);
   
   
   
 
 
 
 [HttpPost]
        public async Task<IActionResult> CommitErrorLog(ErrorLogRequest errorLog)
        {
            var result = await _ccmsRepository.CommitErrorLog(errorLog);


            return Content(JsonConvert.SerializeObject(new
            {
                success = result.Success,
                message = result.Message,
                data = JValue.CreateNull()
            }, Formatting.Indented));

        }
        
        
        
        
         #region ErroLogAPI

        public async Task<ResponseModel> CommitErrorLog(ErrorLogRequest errorLog)
        {
            ResponseModel? response = null;
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@machineName", errorLog.MachineName);
                parameters.Add("@message", errorLog.Message);
                parameters.Add("@level", errorLog.Level);
                parameters.Add("@exception", errorLog.Exception);
                parameters.Add("@stackTrace", errorLog.StackTrace);
                parameters.Add("@logger", errorLog.Logger);
                parameters.Add("@source", errorLog.Source);

                await _dbConnection.ExecuteAsync("commit_errorlog_avinash", parameters, commandType: CommandType.StoredProcedure);

                response = ApiResponse.CreateSuccessResponse(responseArray: new[] { errorLog }, message: "Inserted Successfully!");
            }
            catch (Exception ex)
            {
                var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, ex.Message + " RequestBody: " + JsonConvert.SerializeObject(errorLog));
                logEvent.Properties["Source"] = "EmployeePortalAPI- ErrorLogController/InsertTool";
                var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                logger.Log(logEvent);

                throw;
            }
            finally
            {
                response ??= ApiResponse.CreateErrorResponse("Something went wrong!");
            }

            return response;
        }


        #endregion
        
        
        
        
        
        
        
        
        
        
        
        
         public class ErrorLogRequest
    {
        public string? MachineName { get; set; }
        public string? Message { get; set; }
        public string? Level { get; set; }
        public string? Exception { get; set; }
        public string? StackTrace { get; set; }
        public string? Logger { get; set; }
        public string? Source { get; set; }
    }
