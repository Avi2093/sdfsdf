using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace EmployeePortal.API.common
{
    public class EncryptDecryptPayload
    {
        private readonly byte[] _encryptionKey;

        public EncryptDecryptPayload()
        {
            string encryptionKey = "MySecretEncryptionKey1234567890123456";
            this._encryptionKey = Encoding.UTF8.GetBytes(encryptionKey);
        }

        public string Encrypt(object payload)
        {
            string jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(payload);

            using Aes aesAlg = Aes.Create();
            aesAlg.Key = GetHashedEncryptionKey(_encryptionKey);
            aesAlg.GenerateIV();

            byte[] iv = aesAlg.IV;

            using MemoryStream msEncrypt = new MemoryStream();

            // Create CryptoStream with encryptor and write encrypted data to MemoryStream
            using (CryptoStream csEncrypt =
                new CryptoStream(msEncrypt, aesAlg.CreateEncryptor(aesAlg.Key, iv), CryptoStreamMode.Write))
            {
                using StreamWriter swEncrypt = new StreamWriter(csEncrypt);

                swEncrypt.Write(jsonPayload);

                swEncrypt.Close();
            }

            byte[] encryptedData = msEncrypt.ToArray();

            // Combine IV and encrypted data
            byte[] combinedData = iv.Concat(encryptedData).ToArray();

            return Convert.ToBase64String(combinedData);
        }

        public object Decrypt(string encryptedPayload)
        {
            byte[] combinedData = Convert.FromBase64String(encryptedPayload);

            using Aes aesAlg = Aes.Create();
            aesAlg.Key = GetHashedEncryptionKey(_encryptionKey);

            // Extract IV from the combined data
            byte[] iv = combinedData.Take(aesAlg.BlockSize / 8).ToArray();

            // Remove IV from the combined data to get encrypted payload
            byte[] encryptedData = combinedData.Skip(aesAlg.BlockSize / 8).ToArray();

            using MemoryStream msDecrypt = new MemoryStream(encryptedData);

            using (CryptoStream csDecrypt =
                  new CryptoStream(msDecrypt, aesAlg.CreateDecryptor(aesAlg.Key, iv), CryptoStreamMode.Read))
            {
                using StreamReader srDecrypt = new StreamReader(csDecrypt);

                string decryptedPayload = srDecrypt.ReadToEnd();

                return Newtonsoft.Json.JsonConvert.DeserializeObject(decryptedPayload);
            }
        }

        private byte[] GetHashedEncryptionKey(byte[] encryptionKey)
        {
            using var sha256 = SHA256.Create();

            return sha256.ComputeHash(encryptionKey);
        }
    }
}
