    public async Task<ResponseModel> GetRoleById(int ccmsid)
        {
            ResponseModel? response = null;
            try
            {
                var parameters = new DynamicParameters();
                parameters.Add("@ccmsid", ccmsid, DbType.Int32);

                var result = await _dbConnection.QueryAsync<object>("sel_role", parameters, commandType: CommandType.StoredProcedure);
                var responseArray = result.ToArray();

                if (responseArray.Length > 0)
                {
                    response = ApiResponse.CreateSuccessResponse(responseArray, "Retrieved Successfully!");
                }
                else
                {
                    var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, "Record Not Found");
                    logEvent.Properties["Source"] = "EmployeePortalAPI-RolesController/GetRoleById";
                    var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                    logger.Log(logEvent);

                    response = ApiResponse.CreateErrorResponse("Record not found!");
                    response.HttpStatusCode = (int)HttpStatusCode.NoContent;
                }
            }
            catch (Exception ex)
            {
                var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, ex.Message);
                logEvent.Properties["Source"] = "EmployeePortal - RoleController/GetRoleByyId";
                var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                logger.Log(logEvent);
                throw;
            }

            return response;
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
         public async Task<ResponseModel> GetMenu()
        {
            try
            {
                var result = await _dbConnection.QueryAsync<object>("sel_getmenus", commandType: CommandType.StoredProcedure);

                if (result.Any())
                {
                    var response = ApiResponse.CreateSuccessResponse(responseArray: result.ToArray(), message: "Retrieved Successfully!");
                    return response;
                }
                else
                {
                    var errorResponse = ApiResponse.CreateErrorResponse("Record not found");
                    errorResponse.HttpStatusCode = (int)HttpStatusCode.NoContent;

                    // Logging the error 
                    var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, "Record not found");
                    logEvent.Properties["Source"] = "EmployeePortalAPI-MenuController/GetMenu";
                    var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                    logger.Log(logEvent);

                    return errorResponse;
                }
            }
            catch (Exception ex)
            {
                var errorResponse = ApiResponse.CreateErrorResponse(errorMessage: ex.Message);
                var logEvent = new LogEventInfo(NLog.LogLevel.Error, null, ex.Message);
                logEvent.Properties["Source"] = "EmployeePortalAPI-MenuController/GetMenu";
                var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
                logger.Log(logEvent);
                return errorResponse;
            }
        }
        
        
        
        
        [HttpGet]
    public async Task<IActionResult> GetMenu()
    {
        var result = await _ccmsRepository.GetMenu();
        if (result == null)
            return NoContent();

        return Ok(JsonConvert.SerializeObject(result, Formatting.Indented));
    }
    
    
    
     [HttpGet("{ccmsid}")]
        public async Task<IActionResult> GetRoleById(int ccmsid)
        {
            var role = await _epRepository.GetRoleById(ccmsid);
            //if (role == null)
            //    return NoContent();
            if (role.HttpStatusCode == 204)
                return NoContent();

            return Ok(JsonConvert.SerializeObject(role, Formatting.Indented));
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
         private static async Task HandleExceptions(HttpContext context, Exception ex)
        {
            var controllerName = context.Request.Path.Value;
            var methodName = context.Request.Method;

            var logger = NLog.LogManager.Setup().LoadConfigurationFromAppSettings().GetCurrentClassLogger();
            logger.Error(ex, $"[{controllerName}.{methodName}] An error occurred while processing your request.");

            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            await context.Response.WriteAsJsonAsync(new { error = "An error occurred while processing your request." });
        }
